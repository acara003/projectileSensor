
main_unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d71  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b1  00000000  00000000  00001169  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000706  00000000  00000000  00001b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050c  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000359  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3e d0       	rcall	.+124    	; 0x116 <main>
  9a:	f6 c0       	rjmp	.+492    	; 0x288 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <USART_init>:
}

unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	59 f0       	breq	.+22     	; 0xb8 <USART_init+0x1a>
  a2:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  a6:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  b0:	8e e0       	ldi	r24, 0x0E	; 14
  b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b6:	08 95       	ret
  b8:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  bc:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
  c6:	8c e0       	ldi	r24, 0x0C	; 12
  c8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
  cc:	08 95       	ret

000000ce <USART_send>:

void USART_send(unsigned char data, unsigned char num) {
    if(num != 1) {
  ce:	61 30       	cpi	r22, 0x01	; 1
  d0:	41 f0       	breq	.+16     	; 0xe2 <USART_send+0x14>
        /* Wait for empty transmit buffer */
        while( !( UCSR0A & (1<<UDRE0)) );
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	95 ff       	sbrs	r25, 5
  da:	fd cf       	rjmp	.-6      	; 0xd6 <USART_send+0x8>
        /* Put data into buffer, sends the data */
        UDR0 = data;
  dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e0:	08 95       	ret
    } else {
        /* Wait for empty transmit buffer */
        while( !( UCSR1A & (1<<UDRE1)) );
  e2:	e8 ec       	ldi	r30, 0xC8	; 200
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	95 ff       	sbrs	r25, 5
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <USART_send+0x18>
        /* Put data into buffer, sends the data */
        UDR1 = data;
  ec:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  f0:	08 95       	ret

000000f2 <USART_receive>:
    }
}

unsigned char USART_receive(unsigned char num) {
    if(num != 1) {
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	41 f0       	breq	.+16     	; 0x106 <USART_receive+0x14>
        /* Wait for data to be received */
        while( !(UCSR0A & (1<<RXC0)) );
  f6:	e0 ec       	ldi	r30, 0xC0	; 192
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	ec f7       	brge	.-6      	; 0xfa <USART_receive+0x8>
        /* Get and return received data from buffer */
        return UDR0;
 100:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 104:	08 95       	ret
    } else {
        /* Wait for data to be received */
        while( !(UCSR1A & (1<<RXC1)) );
 106:	e8 ec       	ldi	r30, 0xC8	; 200
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <USART_receive+0x18>
        /* Get and return received data from buffer */
        return UDR1;
 110:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    }
}
 114:	08 95       	ret

00000116 <main>:
#define MYUBRR FOSC/16/BAUD-1

#define dev8SEG  0x70      // device address of 8 segment adafruit LED

int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	60 97       	sbiw	r28, 0x10	; 16
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF; PORTA = 0x00; // LED
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	81 b9       	out	0x01, r24	; 1
 12e:	12 b8       	out	0x02, r1	; 2
    DDRB = 0x01; PORTB = 0xFE; // LED and buttons
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	94 b9       	out	0x04, r25	; 4
 134:	9e ef       	ldi	r25, 0xFE	; 254
 136:	95 b9       	out	0x05, r25	; 5
    DDRC = 0xFF; PORTC = 0x00; // I2C
 138:	87 b9       	out	0x07, r24	; 7
 13a:	18 b8       	out	0x08, r1	; 8
    DDRD = 0x00; PORTD = 0xFF; // USART
 13c:	1a b8       	out	0x0a, r1	; 10
 13e:	8b b9       	out	0x0b, r24	; 11
    
    //usart
    USART_init(0,MYUBRR);
 140:	63 e3       	ldi	r22, 0x33	; 51
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	ab df       	rcall	.-170    	; 0x9e <USART_init>
    USART_init(1,MYUBRR);
 148:	63 e3       	ldi	r22, 0x33	; 51
 14a:	70 e0       	ldi	r23, 0x00	; 0
    
    //i2c
    i2c_init();
 14c:	81 e0       	ldi	r24, 0x01	; 1
    unsigned char ret;
    
    //for LED
    uint16_t displaybuffer[8]; 
    
    ret = i2c_start((dev8SEG<<1)+I2C_WRITE);       // set device address and write mode
 14e:	a7 df       	rcall	.-178    	; 0x9e <USART_init>
 150:	52 d0       	rcall	.+164    	; 0x1f6 <i2c_init>
    //ret = i2c_start(0xE1);       // set device address and write mode
        
    if ( ret ) {
 152:	80 ee       	ldi	r24, 0xE0	; 224
 154:	57 d0       	rcall	.+174    	; 0x204 <i2c_start>
        // failed to issue start condition, possibly no device found 
        i2c_stop();
 156:	88 23       	and	r24, r24
 158:	79 f0       	breq	.+30     	; 0x178 <main+0x62>
        PORTA = 0x81;                         // activate bit 0 and 3 LED to show error
 15a:	7b d0       	rcall	.+246    	; 0x252 <i2c_stop>
 15c:	81 e8       	ldi	r24, 0x81	; 129
#define MYUBRR FOSC/16/BAUD-1

#define dev8SEG  0x70      // device address of 8 segment adafruit LED

int main(void)
{
 15e:	82 b9       	out	0x02, r24	; 2
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
}

unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	0f 2e       	mov	r0, r31
 164:	f0 ec       	ldi	r31, 0xC0	; 192
 166:	cf 2e       	mov	r12, r31
 168:	d1 2c       	mov	r13, r1
    }
}

unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 16a:	f0 2d       	mov	r31, r0
 16c:	0f 2e       	mov	r0, r31
 16e:	f8 ec       	ldi	r31, 0xC8	; 200
        // failed to issue start condition, possibly no device found 
        i2c_stop();
        PORTA = 0x81;                         // activate bit 0 and 3 LED to show error
    } else {
        // issuing start condition ok, device accessible 
        i2c_write(0x21);                      // turn oscillator on
 170:	ef 2e       	mov	r14, r31
        i2c_stop();
 172:	f1 2c       	mov	r15, r1
        
        i2c_start((dev8SEG<<1)+I2C_WRITE);
 174:	f0 2d       	mov	r31, r0
        i2c_write(0x81);                      //blink rate is bit 2
 176:	2b c0       	rjmp	.+86     	; 0x1ce <main+0xb8>
        i2c_stop();
 178:	81 e2       	ldi	r24, 0x21	; 33
        
        i2c_start((dev8SEG<<1)+I2C_WRITE);
 17a:	74 d0       	rcall	.+232    	; 0x264 <i2c_write>
 17c:	6a d0       	rcall	.+212    	; 0x252 <i2c_stop>
 17e:	80 ee       	ldi	r24, 0xE0	; 224
        i2c_write(0xE0 | 15);                 //brightness is between 0 and 15
 180:	41 d0       	rcall	.+130    	; 0x204 <i2c_start>
 182:	81 e8       	ldi	r24, 0x81	; 129
 184:	6f d0       	rcall	.+222    	; 0x264 <i2c_write>
        i2c_stop();
 186:	65 d0       	rcall	.+202    	; 0x252 <i2c_stop>
 188:	80 ee       	ldi	r24, 0xE0	; 224
        
        i2c_start((dev8SEG<<1)+I2C_WRITE);
 18a:	3c d0       	rcall	.+120    	; 0x204 <i2c_start>
 18c:	8f ee       	ldi	r24, 0xEF	; 239
 18e:	6a d0       	rcall	.+212    	; 0x264 <i2c_write>
        i2c_write((uint8_t)0x00);            //begin at address 0;
 190:	60 d0       	rcall	.+192    	; 0x252 <i2c_stop>
 192:	80 ee       	ldi	r24, 0xE0	; 224
 194:	37 d0       	rcall	.+110    	; 0x204 <i2c_start>
        
        //this is what is going to be printed
        displaybuffer[2] = 0x02;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	65 d0       	rcall	.+202    	; 0x264 <i2c_write>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	9e 83       	std	Y+6, r25	; 0x06
 1a0:	8d 83       	std	Y+5, r24	; 0x05
 1a2:	8e 01       	movw	r16, r28
 1a4:	0f 5f       	subi	r16, 0xFF	; 255
        
        
        //go through stored things to display
        for (uint8_t i=0; i<8; i++) {       
            i2c_write(displaybuffer[i] & 0xFF);
 1a6:	1f 4f       	sbci	r17, 0xFF	; 255
 1a8:	7e 01       	movw	r14, r28
 1aa:	81 e1       	ldi	r24, 0x11	; 17
 1ac:	e8 0e       	add	r14, r24
 1ae:	f1 1c       	adc	r15, r1
 1b0:	f8 01       	movw	r30, r16
            i2c_write(displaybuffer[i] >> 8);
 1b2:	80 81       	ld	r24, Z
 1b4:	d1 80       	ldd	r13, Z+1	; 0x01
 1b6:	0e 5f       	subi	r16, 0xFE	; 254
        //this is what is going to be printed
        displaybuffer[2] = 0x02;
        
        
        //go through stored things to display
        for (uint8_t i=0; i<8; i++) {       
 1b8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ba:	54 d0       	rcall	.+168    	; 0x264 <i2c_write>
 1bc:	8d 2d       	mov	r24, r13
            i2c_write(displaybuffer[i] >> 8);
        }
        
        //i2c_write(displaybuffer[2]);
        
        i2c_stop();
 1be:	52 d0       	rcall	.+164    	; 0x264 <i2c_write>
 1c0:	0e 15       	cp	r16, r14
            
        PORTA = 0xFF;                         // output to LEDs to show success
 1c2:	1f 05       	cpc	r17, r15
 1c4:	a9 f7       	brne	.-22     	; 0x1b0 <main+0x9a>
    }
    
    while (1) 
    {
        buttonYellow = ~PINB;
 1c6:	45 d0       	rcall	.+138    	; 0x252 <i2c_stop>
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
}

unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	82 b9       	out	0x02, r24	; 2
        } else {
            SendLED = 0x00;
        }
        
        
        if(USART_HasReceived(0)) {
 1cc:	c9 cf       	rjmp	.-110    	; 0x160 <main+0x4a>
 1ce:	13 b1       	in	r17, 0x03	; 3
            LED = USART_receive(0);
 1d0:	f6 01       	movw	r30, r12
 1d2:	90 81       	ld	r25, Z
 1d4:	99 23       	and	r25, r25
 1d6:	1c f4       	brge	.+6      	; 0x1de <main+0xc8>
    }
}

unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	8b df       	rcall	.-234    	; 0xf2 <USART_receive>
        }
        
        if(USART_IsSendReady(1)) {
 1dc:	08 2f       	mov	r16, r24
 1de:	f7 01       	movw	r30, r14
            USART_send(SendLED,1);
 1e0:	90 81       	ld	r25, Z
 1e2:	95 ff       	sbrs	r25, 5
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <main+0xdc>
 1e6:	81 2f       	mov	r24, r17
 1e8:	80 95       	com	r24
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	86 95       	lsr	r24
        }
        
        PORTB = LED; 
 1ee:	81 70       	andi	r24, 0x01	; 1
        
    }
 1f0:	6e df       	rcall	.-292    	; 0xce <USART_send>
 1f2:	05 b9       	out	0x05, r16	; 5
 1f4:	ec cf       	rjmp	.-40     	; 0x1ce <main+0xb8>

000001f6 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1fc:	8c e0       	ldi	r24, 0x0C	; 12
 1fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 202:	08 95       	ret

00000204 <i2c_start>:
 204:	94 ea       	ldi	r25, 0xA4	; 164
 206:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 20a:	ec eb       	ldi	r30, 0xBC	; 188
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	90 81       	ld	r25, Z
 210:	99 23       	and	r25, r25
 212:	ec f7       	brge	.-6      	; 0x20e <i2c_start+0xa>
 214:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 218:	98 7f       	andi	r25, 0xF8	; 248
 21a:	98 30       	cpi	r25, 0x08	; 8
 21c:	11 f0       	breq	.+4      	; 0x222 <i2c_start+0x1e>
 21e:	90 31       	cpi	r25, 0x10	; 16
 220:	a1 f4       	brne	.+40     	; 0x24a <i2c_start+0x46>
 222:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 226:	84 e8       	ldi	r24, 0x84	; 132
 228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 22c:	ec eb       	ldi	r30, 0xBC	; 188
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 23       	and	r24, r24
 234:	ec f7       	brge	.-6      	; 0x230 <i2c_start+0x2c>
 236:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 23a:	98 7f       	andi	r25, 0xF8	; 248
 23c:	98 31       	cpi	r25, 0x18	; 24
 23e:	39 f0       	breq	.+14     	; 0x24e <i2c_start+0x4a>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 34       	cpi	r25, 0x40	; 64
 244:	29 f4       	brne	.+10     	; 0x250 <i2c_start+0x4c>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret

00000252 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 252:	84 e9       	ldi	r24, 0x94	; 148
 254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 258:	ec eb       	ldi	r30, 0xBC	; 188
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	84 fd       	sbrc	r24, 4
 260:	fd cf       	rjmp	.-6      	; 0x25c <i2c_stop+0xa>

}/* i2c_stop */
 262:	08 95       	ret

00000264 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 264:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 268:	84 e8       	ldi	r24, 0x84	; 132
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 26e:	ec eb       	ldi	r30, 0xBC	; 188
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 23       	and	r24, r24
 276:	ec f7       	brge	.-6      	; 0x272 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 278:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 27c:	98 7f       	andi	r25, 0xF8	; 248
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	98 32       	cpi	r25, 0x28	; 40
 282:	09 f4       	brne	.+2      	; 0x286 <i2c_write+0x22>
 284:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 286:	08 95       	ret

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
